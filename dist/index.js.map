{"version":3,"sources":["../src/actions/getBalance/getWalletBalanceAction.ts","../src/actions/getBalance/examples.ts","../src/providers/provider.ts","../src/actions/protectData/protectDataAction.ts","../src/actions/protectData/examples.ts","../src/actions/getVoucher/getVoucherAction.ts","../src/actions/getVoucher/examples.ts","../src/index.ts"],"sourcesContent":["import {\n  Action,\n  IAgentRuntime,\n  Memory,\n  State,\n  Content,\n  elizaLogger,\n} from \"@elizaos/core\";\nimport { examples } from \"./examples\";\nimport { iexecProvider } from \"../../providers/provider\";\n\nexport const getWalletBalanceAction: Action = {\n  name: \"GET_WALLET_BALANCE\",\n  description: \"Get the RLC balance of a wallet address using iExec SDK\",\n  similes: [\"Check balance\", \"Get RLC balance\"],\n\n  validate: async (\n    _runtime: IAgentRuntime,\n    message: Memory\n  ): Promise<boolean> => {\n    elizaLogger.log(\"Action: GET_WALLET_BALANCE, Message:\", message);\n    const addressRegex = /0x[a-fA-F0-9]{40}/;\n    const hasAddress = addressRegex.test(message.content.text);\n    const hasEnvAddress = !!process.env.MY_WALLET_ADDRESS?.match(addressRegex);\n    return hasAddress || hasEnvAddress;\n  },\n\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State,\n    _options: any,\n    callback\n  ) => {\n    try {\n      const iexecResponse = await iexecProvider.get(runtime, message, state);\n      if (!iexecResponse.success || !iexecResponse.data) {\n        throw new Error(\n          iexecResponse.error || \"Failed to initialize iExec SDK\"\n        );\n      }\n\n      const iexec = iexecResponse.data.iexec;\n\n      const content = message.content as { text: string };\n      const addressMatch = content.text.match(/0x[a-fA-F0-9]{40}/);\n      const fallbackAddress = process.env.MY_WALLET_ADDRESS;\n\n      const address = addressMatch?.[0] || fallbackAddress;\n      if (!address) {\n        throw new Error(\n          \"No valid Ethereum address found in the prompt or environment\"\n        );\n      }\n\n      const balance = await iexec.account.checkBalance(address);\n      const stakeRLC = Number(balance.stake) * 1e-9;\n      const lockedRLC = Number(balance.locked) * 1e-9;\n\n      const { nRLC } = await iexec.wallet.checkBalances(address);\n      const onChainRLC = Number(nRLC) * 1e-9;\n\n      const responseText = `RLC balance for ${address}:\n- On-chain Wallet: ${onChainRLC} RLC\n- iExec Account Stake: ${stakeRLC} RLC\n- iExec Account Locked: ${lockedRLC} RLC`;\n\n      const response: Content = {\n        text: responseText,\n        actions: [\"GET_WALLET_BALANCE\"],\n      };\n\n      await callback(response);\n      return response;\n    } catch (err) {\n      console.error(\"[iExec Plugin] Error fetching balance:\", err);\n      throw new Error(\"Failed to get wallet balance\");\n    }\n  },\n\n  examples,\n};\n","export const examples = [\n    [\n        {\n            name: \"Example 1\",\n            user: \"user1\",\n            content: {\n                text: \"Check balance\",\n                actions: [\"GET_WALLET_BALANCE\"],\n            },\n        },\n    ],\n    [\n        {\n            name: \"Example 2\",\n            user: \"user2\",\n            content: {\n                text: \"Get RLC balance\",\n                actions: [\"GET_WALLET_BALANCE\"],  \n            },\n        },\n    ],\n];\n","import { IAgentRuntime, Memory, Provider, State } from \"@elizaos/core\";\nimport { IExec, utils } from \"iexec\";\nimport { Wallet } from \"ethers\";\nimport { IExecProviderResponse } from \"../types\";\n\nexport const iexecProvider: Provider = {\n  get: async (\n    _runtime: IAgentRuntime,\n    _message: Memory,\n    _state?: State\n  ): Promise<{ success: boolean; data?: IExecProviderResponse; error?: string }> => {\n    try {\n      const randomPrivateKey = Wallet.createRandom().privateKey;\n      const ethProvider = utils.getSignerFromPrivateKey(\"bellecour\", randomPrivateKey);\n      const iexec = new IExec({ ethProvider });\n\n      return { success: true, data: { iexec } };\n    } catch (error) {\n      console.error(\"[iExecProvider] Failed to instantiate iExec SDK:\", error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : \"Unknown error initializing iExec\",\n      };\n    }\n  },\n};\n","\nimport {\n  Action,\n  Content,\n  elizaLogger,\n  IAgentRuntime,\n  Memory,\n  State,\n} from \"@elizaos/core\";\nimport {getWeb3Provider,IExecDataProtectorCore} from \"@iexec/dataprotector\"\nimport { Wallet } from \"ethers\";\nimport { protectData_examples } from \"./examples\";\n\nexport const protectDataAction: Action = {\n    name: \"PROTECT_DATA\",\n    description: \"Protect data using iExec confidential computing\",\n    similes: [\"Protect my data\", \"Encrypt this information\", \"Make this confidential\"],\n\n    validate: async (\n        _runtime: IAgentRuntime,\n        message: Memory\n    ): Promise<boolean> => {\n        elizaLogger.log(\"Action: PROTECT_DATA, Message:\", message);\n        return true;\n    },\n\n    handler: async (\n        _runtime: IAgentRuntime,\n        message: Memory,\n        _state: State,\n        _options: any,\n        callback,\n    ) => {\n        console.log(\"[HANDLER] PROTECT_DATA =>\", message.content.text);\n        if (!process.env.MY_WALLET_ADDRESS) {\n            throw new Error(\n                \"MY_WALLET_ADDRESS environment variable is not set. Please set it with your wallet address.\",\n            );\n        }\n        try {\n            // Extract the content to protect\n            // This is the trickiest part - determining what portion of the message to protect\n            const content = extractContentToProtect(message.content.text);\n            console.log(\"[PROTECT_DATA] Content to protect:\", content);\n            const web3Provider = getWeb3Provider(Wallet.createRandom().privateKey);\n            const dataProtectorCore = new IExecDataProtectorCore(web3Provider);\n            const protectedData = await dataProtectorCore.protectData({\n                name:\"ElisaOS iExec Plugin\",\n                data: {\n                    content: content,\n                },\n            });\n            await dataProtectorCore.transferOwnership({\n                protectedData: protectedData.address,\n                newOwner: process.env.MY_WALLET_ADDRESS,\n              });\n\n            const response: Content = {\n                text: `Your data has been protected.You can check your protectedData here: https://explorer.iex.ec/bellecour/dataset/${protectedData.address}`,\n                actions: [\"PROTECT_DATA\"],\n            };\n            await callback(response);\n            return response;\n        } catch (err) {\n            console.log(\"[iExec Plugin] Error protecting data:\", err);\n            throw new Error(\"Failed to protect data\");\n        }\n    },\n\n    examples:protectData_examples,\n};\n\n// Helper function to extract the content to protect\nfunction extractContentToProtect(text: string): string {\n    // This is a simplified version. You might need more sophisticated parsing\n    const protectPhrases = [\n        \"protect this data:\",\n        \"encrypt this:\",\n        \"make this confidential:\",\n        \"keep this private:\"\n    ];\n    \n    for (const phrase of protectPhrases) {\n        const index = text.toLowerCase().indexOf(phrase);\n        if (index !== -1) {\n            return text.substring(index + phrase.length).trim();\n        }\n    }\n    \n    // If no specific marker is found, you might want to implement fallback logic\n    // For example, take everything after \"protect\" or use the whole message\n    return text;\n}\n","export const protectData_examples = [\n    [\n        {\n            name: \"Example 1\",\n            user: \"user1\",\n            content: {\n                text: \"Protect this data: My private API key is XYZ123456789\",\n                actions: [\"PROTECT_DATA\"],\n            },\n        },\n    ],\n    [\n        {\n            name: \"Example 2\",\n            user: \"user2\",\n            content: {\n                text: \"I need to encrypt this: Password123!@#\",\n                actions: [\"PROTECT_DATA\"],  \n            },\n        },\n    ],\n    [\n        {\n            name: \"Example 3\",\n            user: \"user3\",\n            content: {\n                text: \"Make this confidential: My wallet recovery phrase is apple banana cherry dog elephant forest guitar\",\n                actions: [\"PROTECT_DATA\"],\n            },\n        },\n    ],\n    [\n        {\n            name: \"Example 4\",\n            user: \"user4\",\n            content: {\n                text: \"Keep this private: Contract details for client XYZ include a payment schedule of $5000 on the 15th of each month\",\n                actions: [\"PROTECT_DATA\"],\n            },\n        },\n    ],\n    [\n        {\n            name: \"Example 5\",\n            user: \"user5\",\n            content: {\n                text: \"protect my data: test@yahoo.fr\",\n                actions: [\"PROTECT_DATA\"],\n            },\n        },\n    ],\n    [\n        {\n            name: \"Example 6\",\n            user: \"user6\",\n            content: {\n                text: \"protect my data Using dataProtector from iExec plugin: content\",\n                actions: [\"PROTECT_DATA\"],\n            },\n        },\n    ],\n    [\n        {\n            name: \"Example 7\",\n            user: \"user7\",\n            content: {\n                text: \"i would to protect this Data: secret@!!\",\n                actions: [\"PROTECT_DATA\"],\n            },\n        },\n    ],\n];\n","import {\n  Action,\n  IAgentRuntime,\n  Memory,\n  State,\n  Content,\n  elizaLogger,\n} from \"@elizaos/core\";\nimport { iexecProvider } from \"../../providers/provider\";\nimport { examples } from \"./examples\";\n\nexport const getVoucherAction: Action = {\n  name: \"GET_USER_VOUCHER\",\n  description:\n    \"Get the user's iExec voucher information (balance, expiration, sponsors, etc.)\",\n  similes: [\n    \"Check voucher\",\n    \"Get iExec voucher info\",\n    \"Retrieve voucher details\",\n  ],\n\n  validate: async (\n    _runtime: IAgentRuntime,\n    message: Memory\n  ): Promise<boolean> => {\n    elizaLogger.log(\"Action: GET_USER_VOUCHER, Message:\", message);\n    const addressRegex = /0x[a-fA-F0-9]{40}/;\n    const hasAddress = addressRegex.test(message.content.text);\n    const hasEnvAddress = !!process.env.MY_WALLET_ADDRESS?.match(addressRegex);\n    return hasAddress || hasEnvAddress;\n  },\n\n  handler: async (\n    _runtime: IAgentRuntime,\n    message: Memory,\n    _state: State,\n    _options: any,\n    callback\n  ) => {\n    const iexecResponse = await iexecProvider.get(_runtime, message, _state);\n\n    if (!iexecResponse.success || !iexecResponse.data) {\n      throw new Error(iexecResponse.error || \"Failed to initialize iExec SDK\");\n    }\n\n    const iexec = iexecResponse.data.iexec;\n\n    const content = message.content as { text: string };\n    const addressMatch = content.text.match(/0x[a-fA-F0-9]{40}/);\n    const userAddress = addressMatch?.[0] || process.env.MY_WALLET_ADDRESS;\n\n    if (!userAddress) {\n      throw new Error(\n        \"No valid Ethereum address provided in the message or environment.\"\n      );\n    }\n\n    try {\n      const userVoucher = await iexec.voucher.showUserVoucher(userAddress);\n\n      const responseText = `Voucher details for ${userVoucher.address}:\n- Balance: ${userVoucher.balance} RLC\n- Expiration: ${userVoucher.expirationTimestamp}\n- Sponsored Apps: ${userVoucher.sponsoredApps.join(\", \") || \"None\"}\n- Sponsored Datasets: ${userVoucher.sponsoredDatasets.join(\", \") || \"None\"}\n- Sponsored Workerpools: ${userVoucher.sponsoredWorkerpools.join(\", \") || \"None\"}\n- Allowance: ${userVoucher.allowanceAmount}\n- Authorized Accounts: ${userVoucher.authorizedAccounts.join(\", \") || \"None\"}`;\n\n      const response: Content = {\n        text: responseText,\n        actions: [\"GET_USER_VOUCHER\"],\n      };\n\n      await callback(response);\n      return response;\n    } catch (error) {\n      if (\n        error instanceof Error &&\n        error.message.includes(\"No Voucher found\")\n      ) {\n        const response: Content = {\n          text: `No voucher found for wallet ${userAddress}. Go to iExec discord to claim your voucher : https://discord.com/invite/aXH5ym5H4k`,\n          actions: [\"GET_USER_VOUCHER\"],\n        };\n\n        await callback(response);\n        return response;\n      }\n\n      console.error(\"[iExec Plugin] Unexpected error fetching voucher:\", error);\n      throw new Error(\"Failed to get voucher information.\");\n    }\n  },\n\n  examples,\n};\n","export const examples = [\n    [\n      {\n        name: \"Example 1\",\n        user: \"user1\",\n        content: {\n          text: \"Show my iExec voucher\",\n          actions: [\"GET_USER_VOUCHER\"],\n        },\n      },\n    ],\n    [\n      {\n        name: \"Example 2\",\n        user: \"user2\",\n        content: {\n          text: \"Get voucher info for 0x1234567890abcdef1234567890abcdef12345678\",\n          actions: [\"GET_USER_VOUCHER\"],\n        },\n      },\n    ],\n    [\n      {\n        name: \"Example 3\",\n        user: \"user3\",\n        content: {\n          text: \"Check authorized accounts and sponsored apps in my voucher\",\n          actions: [\"GET_USER_VOUCHER\"],\n        },\n      },\n    ],\n    [\n      {\n        name: \"Example 4\",\n        user: \"user4\",\n        content: {\n          text: \"What’s the voucher allowance for my wallet?\",\n          actions: [\"GET_USER_VOUCHER\"],\n        },\n      },\n    ],\n    [\n      {\n        name: \"Example 5\",\n        user: \"user5\",\n        content: {\n          text: \"Show user voucher for this wallet\",\n          actions: [\"GET_USER_VOUCHER\"],\n        },\n      },\n    ],\n    [\n      {\n        name: \"Example 6\",\n        user: \"user6\",\n        content: {\n          text: \"Give me my voucher data\",\n          actions: [\"GET_USER_VOUCHER\"],\n        },\n      },\n    ],\n  ];\n","import { Plugin } from \"@elizaos/core\";\nimport { getWalletBalanceAction } from \"./actions/getBalance/getWalletBalanceAction\";\nimport { protectDataAction } from \"./actions/protectData/protectDataAction\";\nimport { getVoucherAction } from \"./actions/getVoucher/getVoucherAction\";\nimport { iexecProvider } from \"./providers/provider\";\n\nconst iexecPlugin: Plugin = {\n  name: \"iexec\",\n  description: \"Plugin for interacting with iexec protocol\",\n  actions: [protectDataAction, getVoucherAction, getWalletBalanceAction],\n  providers: [iexecProvider],\n};\n\nexport { iexecPlugin };\n"],"mappings":"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","names":["elizaLogger","Wallet","elizaLogger","Wallet","elizaLogger","examples","elizaLogger","examples"]}