{"version":3,"sources":["../src/actions/getWalletBalanceAction.ts","../src/actions/examples.ts","../src/index.ts"],"sourcesContent":["import { Action, IAgentRuntime, Memory, State, Content } from \"@elizaos/core\";\nimport { ethers } from \"ethers\";\nimport { examples } from \"./examples\";\n\nexport const getWalletBalanceAction: Action = {\n    name: \"GET_WALLET_BALANCE\",\n    description: \"Get the ETH balance of a wallet address\",\n    similes: [\"Check balance\", \"Get ETH balance\"],\n\n    validate: async (\n        _runtime: IAgentRuntime,\n        message: Memory,\n        _state: State,\n    ): Promise<boolean> => {\n        const addressRegex = /0x[a-fA-F0-9]{40}/;\n        return addressRegex.test(message.content.text);\n    },\n\n    handler: async (\n        _runtime: IAgentRuntime,\n        message: Memory,\n        _state: State,\n        _options: any,\n        callback,\n    ) => {\n        if (!process.env.IEXEC_RPC_URL) {\n            throw new Error(\n                \"iExec RPC url not found in environment variables. Make sure to set the IEXEC_RPC_URL environment variable.\",\n            );\n        }\n        try {\n            const content = message.content as { text: string };\n            const addressMatch = content.text.match(/0x[a-fA-F0-9]{40}/);\n            if (!addressMatch) {\n                throw new Error(\"Valid ethereum address not found in message\");\n            }\n            const address = addressMatch[0];\n\n            const provider = new ethers.JsonRpcProvider(\n                process.env.IEXEC_RPC_URL,\n            );\n            const balance = await provider.getBalance(address);\n            const ethBalance = ethers.formatEther(balance);\n\n            const response: Content = {\n                text: `The balance of ${address} is ${ethBalance} RLC`,\n                actions: [\"GET_WALLET_BALANCE\"],\n                source: message.content.source,\n            };\n\n            await callback(response);\n            return response;\n        } catch (err) {\n            console.log(\"[Ethereum Plugin] Error fetching balance:\", err);\n            throw new Error(\"Failed to get wallet balance\");\n        }\n    },\n\n    examples: examples,\n};\n","export const examples = [\n    [\n        {\n            name: \"Example 1\",\n            user: \"user1\",\n            content: {\n                text: \"Check balance\",\n                actions: [\"GET_WALLET_BALANCE\"],\n            },\n        },\n    ],\n    [\n        {\n            name: \"Example 2\",\n            user: \"user2\",\n            content: {\n                text: \"Get ETH balance\",\n                actions: [\"GET_WALLET_BALANCE\"],  \n            },\n        },\n    ],\n];\n","import { Plugin } from \"@elizaos/core\";\nimport { getWalletBalanceAction } from \"./actions/getWalletBalanceAction\";\n\nconst iexecPlugin: Plugin = {\n    name: \"iexec\",\n    description: \"Plugin for interacting with iexec protocol\",\n    actions: [getWalletBalanceAction], // implement actions and use them here\n};\n\nexport { iexecPlugin };\n"],"mappings":";AACA,SAAS,cAAc;;;ACDhB,IAAM,WAAW;AAAA,EACpB;AAAA,IACI;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,MACN,SAAS;AAAA,QACL,MAAM;AAAA,QACN,SAAS,CAAC,oBAAoB;AAAA,MAClC;AAAA,IACJ;AAAA,EACJ;AAAA,EACA;AAAA,IACI;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,MACN,SAAS;AAAA,QACL,MAAM;AAAA,QACN,SAAS,CAAC,oBAAoB;AAAA,MAClC;AAAA,IACJ;AAAA,EACJ;AACJ;;;ADjBO,IAAM,yBAAiC;AAAA,EAC1C,MAAM;AAAA,EACN,aAAa;AAAA,EACb,SAAS,CAAC,iBAAiB,iBAAiB;AAAA,EAE5C,UAAU,OACN,UACA,SACA,WACmB;AACnB,UAAM,eAAe;AACrB,WAAO,aAAa,KAAK,QAAQ,QAAQ,IAAI;AAAA,EACjD;AAAA,EAEA,SAAS,OACL,UACA,SACA,QACA,UACA,aACC;AACD,QAAI,CAAC,QAAQ,IAAI,eAAe;AAC5B,YAAM,IAAI;AAAA,QACN;AAAA,MACJ;AAAA,IACJ;AACA,QAAI;AACA,YAAM,UAAU,QAAQ;AACxB,YAAM,eAAe,QAAQ,KAAK,MAAM,mBAAmB;AAC3D,UAAI,CAAC,cAAc;AACf,cAAM,IAAI,MAAM,6CAA6C;AAAA,MACjE;AACA,YAAM,UAAU,aAAa,CAAC;AAE9B,YAAM,WAAW,IAAI,OAAO;AAAA,QACxB,QAAQ,IAAI;AAAA,MAChB;AACA,YAAM,UAAU,MAAM,SAAS,WAAW,OAAO;AACjD,YAAM,aAAa,OAAO,YAAY,OAAO;AAE7C,YAAM,WAAoB;AAAA,QACtB,MAAM,kBAAkB,OAAO,OAAO,UAAU;AAAA,QAChD,SAAS,CAAC,oBAAoB;AAAA,QAC9B,QAAQ,QAAQ,QAAQ;AAAA,MAC5B;AAEA,YAAM,SAAS,QAAQ;AACvB,aAAO;AAAA,IACX,SAAS,KAAK;AACV,cAAQ,IAAI,6CAA6C,GAAG;AAC5D,YAAM,IAAI,MAAM,8BAA8B;AAAA,IAClD;AAAA,EACJ;AAAA,EAEA;AACJ;;;AExDA,IAAM,cAAsB;AAAA,EACxB,MAAM;AAAA,EACN,aAAa;AAAA,EACb,SAAS,CAAC,sBAAsB;AAAA;AACpC;","names":[]}