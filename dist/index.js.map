{"version":3,"sources":["../src/actions/getBalance/getWalletBalanceAction.ts","../src/actions/getBalance/examples.ts","../src/actions/protectData/protectDataAction.ts","../src/actions/protectData/examples.ts","../src/index.ts"],"sourcesContent":["import { Action, IAgentRuntime, Memory, State, Content } from \"@elizaos/core\";\nimport { IExec, utils } from \"iexec\";\nimport { Wallet } from \"ethers\";\nimport { examples } from \"./examples\";\n\nconst randomPrivateKey = Wallet.createRandom().privateKey;\n\nconst ethProvider = utils.getSignerFromPrivateKey(\"bellecour\", randomPrivateKey);\nconst iexec = new IExec({ ethProvider });\n\nexport const getWalletBalanceAction: Action = {\n  name: \"GET_WALLET_BALANCE\",\n  description: \"Get the RLC balance of a wallet address using iExec SDK\",\n  similes: [\"Check balance\", \"Get RLC balance\"],\n\n  validate: async (\n    _runtime: IAgentRuntime,\n    message: Memory\n  ): Promise<boolean> => {\n      const addressRegex = /0x[a-fA-F0-9]{40}/;\n      console.log(\"[VALIDATE] GET_WALLET_BALANCE =>\", addressRegex.test(message.content.text));\n    return addressRegex.test(message.content.text);\n  },\n\n  handler: async (\n    _runtime: IAgentRuntime,\n    message: Memory,\n    _state: State,\n    _options: any,\n    callback\n  ) => {\n    try {\n      const content = message.content as { text: string };\n      const addressMatch = content.text.match(/0x[a-fA-F0-9]{40}/);\n      if (!addressMatch) {\n        throw new Error(\"Valid Ethereum address not found in message\");\n      }\n      const address = addressMatch[0];\n\n      // Protocol (stake, locked)\n      const balance = await iexec.account.checkBalance(address);\n      const stakeRLC = Number(balance.stake) * 1e-9;\n      const lockedRLC = Number(balance.locked) * 1e-9;\n\n      // On-chain wallet balance\n      const { nRLC } = await iexec.wallet.checkBalances(address);\n      const onChainRLC = Number(nRLC) * 1e-9;\n\n      const responseText = `RLC balance for ${address}:\n        - On-chain Wallet: ${onChainRLC} RLC\n        - iExec Account Stake: ${stakeRLC} RLC\n        - iExec Account Locked: ${lockedRLC} RLC`;\n\n      const response: Content = {\n        text: responseText,\n        actions: [\"GET_WALLET_BALANCE\"],\n      };\n\n      await callback(response);\n      return response;\n    } catch (err) {\n      console.error(\"[iExec Plugin] Error fetching balance:\", err);\n      throw new Error(\"Failed to get wallet balance\");\n    }\n  },\n\n  examples: examples,\n};\n","export const examples = [\n    [\n        {\n            name: \"Example 1\",\n            user: \"user1\",\n            content: {\n                text: \"Check balance\",\n                actions: [\"GET_WALLET_BALANCE\"],\n            },\n        },\n    ],\n    [\n        {\n            name: \"Example 2\",\n            user: \"user2\",\n            content: {\n                text: \"Get RLC balance\",\n                actions: [\"GET_WALLET_BALANCE\"],  \n            },\n        },\n    ],\n];\n","\nimport { Action, Content, IAgentRuntime, Memory, State } from \"@elizaos/core\";\nimport {getWeb3Provider,IExecDataProtectorCore} from \"@iexec/dataprotector\"\nimport { Wallet } from \"ethers\";\nimport { protectData_examples } from \"./examples\";\n\nexport const protectDataAction: Action = {\n    name: \"PROTECT_DATA\",\n    description: \"Protect data using iExec confidential computing\",\n    similes: [\"Protect my data\", \"Encrypt this information\", \"Make this confidential\"],\n\n    validate: async (\n        _runtime: IAgentRuntime,\n        message: Memory\n    ): Promise<boolean> => {\n        // Check for intent to protect data in the message\n        const protectIntentPhrases = [\n            \"protect this data\",\n            \"encrypt this\",\n            \"make this confidential\",\n            \"keep this private\"\n        ];\n        \n        const test=  protectIntentPhrases.some(phrase => \n            message.content.text.toLowerCase().includes(phrase)\n        );\n        console.log(\"[VALIDATE] PROTECT_DATA =>\", test);\n        return test;\n    },\n\n    handler: async (\n        _runtime: IAgentRuntime,\n        message: Memory,\n        _state: State,\n        _options: any,\n        callback,\n    ) => {\n        console.log(\"[HANDLER] PROTECT_DATA =>\", message.content.text);\n        if (!process.env.MY_WALLET_ADDRESS) {\n            throw new Error(\n                \"MY_WALLET_ADDRESS environment variable is not set. Please set it with your wallet address.\",\n            );\n        }\n        try {\n            // Extract the content to protect\n            // This is the trickiest part - determining what portion of the message to protect\n            const content = extractContentToProtect(message.content.text);\n            console.log(\"[PROTECT_DATA] Content to protect:\", content);\n            const web3Provider = getWeb3Provider(Wallet.createRandom().privateKey);\n            const dataProtectorCore = new IExecDataProtectorCore(web3Provider);\n            const protectedData = await dataProtectorCore.protectData({\n                name:\"ElisaOS iExec Plugin\",\n                data: {\n                    content: content,\n                },\n            });\n            console.log(\"ðŸš€ ~ protectedData:\", protectedData)\n            await dataProtectorCore.transferOwnership({\n                protectedData: protectedData.address,\n                newOwner: process.env.MY_WALLET_ADDRESS,\n              });\n\n            const response: Content = {\n                text: `Your data has been protected.You can check your protectedData here: https://explorer.iex.ec/bellecour/dataset/${protectedData.address}`,\n                actions: [\"PROTECT_DATA\"],\n            };\n            await callback(response);\n            return response;\n        } catch (err) {\n            console.log(\"[iExec Plugin] Error protecting data:\", err);\n            throw new Error(\"Failed to protect data\");\n        }\n    },\n\n    examples:protectData_examples,\n};\n\n// Helper function to extract the content to protect\nfunction extractContentToProtect(text: string): string {\n    // This is a simplified version. You might need more sophisticated parsing\n    const protectPhrases = [\n        \"protect this data:\",\n        \"encrypt this:\",\n        \"make this confidential:\",\n        \"keep this private:\"\n    ];\n    \n    for (const phrase of protectPhrases) {\n        const index = text.toLowerCase().indexOf(phrase);\n        if (index !== -1) {\n            return text.substring(index + phrase.length).trim();\n        }\n    }\n    \n    // If no specific marker is found, you might want to implement fallback logic\n    // For example, take everything after \"protect\" or use the whole message\n    return text;\n}\n","export const protectData_examples = [\n    [\n        {\n            name: \"Example 1\",\n            user: \"user1\",\n            content: {\n                text: \"Protect this data: My private API key is XYZ123456789\",\n                actions: [\"PROTECT_DATA\"],\n            },\n        },\n    ],\n    [\n        {\n            name: \"Example 2\",\n            user: \"user2\",\n            content: {\n                text: \"I need to encrypt this: Password123!@#\",\n                actions: [\"PROTECT_DATA\"],  \n            },\n        },\n    ],\n    [\n        {\n            name: \"Example 3\",\n            user: \"user3\",\n            content: {\n                text: \"Make this confidential: My wallet recovery phrase is apple banana cherry dog elephant forest guitar\",\n                actions: [\"PROTECT_DATA\"],\n            },\n        },\n    ],\n    [\n        {\n            name: \"Example 4\",\n            user: \"user4\",\n            content: {\n                text: \"Keep this private: Contract details for client XYZ include a payment schedule of $5000 on the 15th of each month\",\n                actions: [\"PROTECT_DATA\"],\n            },\n        },\n    ],\n    [\n        {\n            name: \"Example 5\",\n            user: \"user5\",\n            content: {\n                text: \"protect my data: test@yahoo.fr\",\n                actions: [\"PROTECT_DATA\"],\n            },\n        },\n    ],\n    [\n        {\n            name: \"Example 5\",\n            user: \"user5\",\n            content: {\n                text: \"protect my data Using dataProtector from iExec plugin: content\",\n                actions: [\"PROTECT_DATA\"],\n            },\n        },\n    ],\n];\n","import { Plugin } from \"@elizaos/core\";\nimport { getWalletBalanceAction } from \"./actions/getBalance/getWalletBalanceAction\";\nimport { protectDataAction } from \"./actions/protectData/protectDataAction\";\n\nconst iexecPlugin: Plugin = {\n  name: \"iexec\",\n  description: \"Plugin for interacting with iexec protocol\",\n  actions: [protectDataAction, getWalletBalanceAction], // implement actions and use them here\n};\n\nexport { iexecPlugin };\n"],"mappings":"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","names":["Wallet","Wallet"]}